Plotting in R
========================================================
author: MRC London Institute of Medical Sciences (LMS)
date: https://lmsbioinformatics.github.io/LMS_PlottingInR/
width: 1440
height: 1100
autosize: true
font-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
font-family: 'Slabo 27px', serif;
css:style.css

Materials.
========================================================
id: materials

All prerequisites, links to material and slides for this course can be found on github.
* [PlottingInR](https://lmsbioinformatics.github.io/LMS_PlottingInR/)

Or can be downloaded as a zip archive from here. 
* [Download zip](https://github.com/LMSBioinformatics/LMS_PlottingInR/archive/master.zip)


Set the Working directory
========================================================

Before running any of the code in the practicals or slides we need to set the working directory to the folder we unarchived. 

You may navigate to the unarchived LMS_PlottingInR/course folder in the Rstudio menu

**Session -> Set Working Directory -> Choose Directory**

<div align="center">
<img src="figures/R_set_path.png" alt="path" height="700" width="1200">
</div>


Set working directory - in the console
========================================================

Use getwd() to see where your current directory is

```{r,eval=F} 
getwd()
```

Use setwd() to see where your current directory is

```{r,eval=F} 
setwd("/PathToMyDownload/LMS_PlottingInR/course")
# e.g. setwd("~/Downloads/LMS_PlottingInR/course")
```

Plotting in R
========================================================
type:section
id:plotting

Introduction
========================================================

R has excellent graphics and plotting capabilities. They are mostly found in following three sources.
 + base graphics
 
    easy to use, conceptually motivated by drawing on a canvas
    
    would become difficult or impossible to draw complicated plots
    
 + the lattice package
 + the ggplot2 package
 
    high-level approach: grammar of graphics

 + saving your plots

 
Lattice and ggplot2 packages are built on grid graphics package while the base graphics routines adopt a pen and paper model for plotting.

We will start from the base graphics then focus on ggplot2



R Base Graphics
========================================================
type:section
id: baseGraph

Base Graphics
========================================================
+ Line Charts

First we'll produce a very simple graph using the values in the data.frame that we created:

```{r}
base_graph_df<- data.frame(sample_num=c(1:6),
                           treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
                           control= c(0, 20, 40, 60, 80,100))

base_graph_df
```

Base Graphics
========================================================
+ Line Charts

Plot the treatment with default parameters

```{r,eval=FALSE}
?plot
```

    * Usage

    plot(x, y, ...)


```{r,eval=FALSE}
plot(base_graph_df$sample_num, base_graph_df$treatment)
```

Line Plot
========================================================


```{r, echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
plot(base_graph_df$sample_num,base_graph_df$treatment)
```

=======================================================
Now, let's add a **title**, a **line to connect the points**, and some **colour**:

Plot treatment using blue points overlayed by a line

hint: look into the "type" argument

```{r,eval=T}
?plot
```

## Arguments

  * type: what type of plot should be drawn. Possible types are

        "p" for points,
        "l" for lines,
        "b" for both,
        "c" for the lines part alone of "b",
        "o" for both ‘overplotted’,
        "h" for ‘histogram’ like (or ‘high-density’) vertical lines,
        "s" for stair steps,
        "S" for other steps, see ‘Details’ below,
        "n" for no plotting.

=======================================================

```{r,eval=FALSE}
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
```

Create a title with a red, bold/italic font

hint: 1=plain, 2=bold, 3=italic, 4=bold italic, 5=symbol
```{r,eval=FALSE}
title(main="Treatment", col.main="red", font.main=4)
```

Line Plot
========================================================
```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
title(main="Treatment", col.main="red", font.main=4)
```

========================================================
Now let's add a **red line for control column** from the data.frame **base_graph_df** and **specify the y-axis range** directly so it will be large enough to fit the data:

* show the control information
```{r,eval=TRUE}
base_graph_df$control
```

* Plot **treatment** using a y axis that ranges from 0 to 100
```{r,eval=FALSE}
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
```
* Plot **control** with **red dashed line** and **square points** [hint: pch=0]
```{r,eval=FALSE}
lines(base_graph_df$control, type="o", pch=0, lty="dashed", col="red")
```

* Create a title with a red, bold/italic font
```{r,eval=FALSE}
title(main="Expression Data", col.main="red", font.main=4)
```

==========================================================

```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
lines(base_graph_df$control, type="o", pch=0, lty="dashed", col="red")
title(main="Expression Data", col.main="red", font.main=4)
```

Plotting ‘character’ (pch) - symbol to use
==========================================================

```{r,echo=F,fig.width=12,fig.height=7}
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
text(0:25, 0.6, 0:25, cex = 1, font=2)
points(0:25, rep(0.3, 26), pch = 0:25, bg = "grey",cex=2)
```

The line type - lty
==========================================================

lty can be c("blank",solid", "dashed", "dotted", "dotdash", "longdash", "twodash") or number c(0, 1, 2, 3, 4, 5, 6)

```{r,echo=F,fig.width=12,fig.height=7}
showLty <- function(ltys, xoff = 0, ...) {
   stopifnot((n <- length(ltys)) >= 1)
   op <- par(mar = rep(.5,4)); on.exit(par(op))
   plot(0:1, 0:1, type = "n", axes = FALSE, ann = FALSE)
   y <- (n:1)/(n+1)
   clty <- as.character(ltys)
   mytext <- function(x, y, txt)
      text(x, y, txt, adj = c(0, -.3), cex =2, ...)
   abline(h = y, lty = ltys,lwd = 2, ...); mytext(xoff, y, clty)
   y <- y - 1/(3*(n+1))
   #abline(h = y, lty = ltys, lwd = 2, ...)
   #mytext(1/8+xoff, y, paste(clty," lwd = 2"))
}
showLty(c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash"))
```

change axes labels, colour and add legend
==========================================================

Next let's change the axes labels to match our data and add a legend. 

We'll also compute the y-axis values using the max function so any changes to our data will be automatically reflected in our graph. 

* Calculate range from 0 to max value of data
```{r}
g_range <- range(0, base_graph_df$treatment, base_graph_df$control)
g_range

```

range returns a vector containing the minimum and maximum of all the given arguments.

* Plot treatment using y axis that ranges from 0 to max value in treatment or control vector.  Turn off axes and annotations (axis labels) so we can specify them ourselves.

```{r,eval=FALSE}
plot(base_graph_df$sample_num ,base_graph_df$treatment, 
     type="o", col="blue", 
     ylim=g_range,axes=FALSE, ann=FALSE)
```

========================================================

Make x axis using labels
```{r,eval=FALSE}
axis(1, at=1:6, lab=base_graph_df$sample_num)
```

Make y axis with horizontal labels that display ticks at every 20 marks. 

```{r,eval=FALSE}
axis(2, las=1, at=20*0:g_range[2])
```

Create box around plot
```{r,eval=FALSE}
box()
```

========================================================

Plot control vector with red dashed line and square points

```{r,eval=FALSE}
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
```

Create a title with a red, bold/italic font
```{r,eval=FALSE}
title(main="Data", col.main="red", font.main=4)
```

Label the x and y axes with dark green text
```{r,eval=FALSE}
title(xlab="Samples", col.lab="purple")
title(ylab="Values", col.lab="purple")
```

========================================================

Create a legend at (1, g_range[2]) that is slightly smaller (cex) and uses the same line colors and points used by the actual plots 

```{r,eval=FALSE}
legend(1, g_range[2], c("treatment","control"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2);  
```

```{r,echo=FALSE,fig.width=8,fig.height=3.5,dpi=300,out.width="1920px",height="1080px"}
plot(base_graph_df$sample_num ,base_graph_df$treatment, type="o", col="blue", ylim=g_range,axes=FALSE, ann=FALSE)
axis(1, at=1:6, lab=paste("Sample",c(1:6)))
axis(2, las=1, at=20*0:g_range[2])
box()

lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
title(main="Data", col.main="red", font.main=4)
title(xlab="Samples", col.lab="purple")
title(ylab="Values", col.lab="purple")
legend(1, g_range[2], c("treatment","control"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2);  
```
 	


ggplot2 R package
========================================================
type:section
id:ggplot2

ggplot2 is a powerful R package based on the grammar of graphics (Wilkinson, 2005). 

"In brief, the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars)." - Wickham, 2016


ggplot2
========================================================

 + scatter plot
 
 + box plot
 
 + bar chart
 
 + histogram
 
 + density plot
 
 + faceting
 
 + aestheics

 + saving plots



ggplot2 R package
========================================================

We'll use the **GoT_dataset** that kindly provided by Dr. Reidar P. Lystad. Inj Epidemiol. 2018. 5(1):44. doi: 10.1186/s40621-018-0174-7. (https://figshare.com/articles/Game_of_Thrones_mortality_and_survival_dataset/8259680)

We can use the head function to look at the first few rows of file "episode_data.csv"
```{r}
library(ggplot2)
episode_data<-read.csv("GoT_dataset/episode_data.csv")

head(episode_data)
```


========================================================

## Every ggplot2 plot has three key components:

    1. data,
    
    2. aesthetic mappings between variables in the data and visual
    properties, and
    
    3. layer: usually created with a geom function.


========================================================

use ggplot2's ggplot() function to setup **data** and **aesthetic mappings**

```{r,eval=T, fig.width=8, fig.height=8}
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))

print(g)
```


add geom_point layer - Scatter plot
========================================================

```{r,eval=T, fig.width=8, fig.height=8}
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
g + geom_point()

```


add geom_histogram layer - Histogram plot (1/2)
========================================================


```{r,eval=T, fig.width=8, fig.height=8}
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram()

```

add geom_histogram layer - Histogram plot (2/2)
========================================================
change binwidth

```{r,eval=T, fig.width=8, fig.height=8}
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=200)

```


add geom_density layer - Density plot (1/3)
========================================================
add geom_density layer

```{r,eval=T,fig.width=10, fig.height=8}
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_density()

```


add geom_density layer - Density plot (2/3)
========================================================

```{r,eval=T, fig.width=10, fig.height=8}
ghis<- ggplot(data=episode_data, aes(x=net_running_time,fill=as.factor(season)))
ghis + geom_density() 

```

add geom_density layer - Density plot (3/3)
========================================================

```{r,eval=T, fig.width=10, fig.height=8}
ghis<- ggplot(data=episode_data, aes(x=net_running_time,fill=as.factor(season)))
ghis + geom_density(alpha=0.25) 

```

Bar plot (1/2) - geom_bar()
========================================================
add geom_bar layer

```{r,eval=T, fig.width=8, fig.height=5}
episode_data$season<-as.factor(episode_data$season)
gbar<- ggplot(data=episode_data, aes(x=season))
gbar + geom_bar() 
```

Bar plot (2/2) - coord_flip ()
========================================================

use different colours for different seasons and also change the labels

```{r,eval=T, fig.width=8, fig.height=5}
gbar + geom_bar() + coord_flip()

```


Exercise 
========================================================
Time for exercise - 5 mins to review what we have gotten so far....

```{r,eval=T, fig.width=8, fig.height=5}

```

Box plot (1/7) - use geom_boxplot()
========================================================
use "Got_dataset/short_data.csv" dataset

```{r,eval=T, fig.width=8, fig.height=5}
subset_GoT<-read.csv(file="Got_dataset/subset_GoT.csv")

head(subset_GoT)
```


Box plot (2/7) - use geom_boxplot()
========================================================
add geom_boxplot layer

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs))+
  geom_boxplot()

```

Box plot (3/7) - geom_point()
========================================================

add another layer

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs))+
  geom_boxplot() + geom_point()

```

Box plot (4/7) - position_jitter()
========================================================

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs))+
  geom_boxplot() + geom_point(position = position_jitter())
```


Box plot (5/7) - add colour
========================================================
add geom_bar layer

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs,fill=occupation))+
  geom_boxplot()

```

Box plot (6/7) - facet_wrap()
========================================================
add facet_wrap() layer

facet_wrap(~variable)

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs,fill=occupation))+
  geom_boxplot()+facet_wrap(~sex)

```

Box plot (7/7) - facet_grid()
========================================================
add facet_grid() layer

facet_grid(Rows.for.var1~Columns.for.var2)

```{r,eval=T, fig.width=8, fig.height=5}
ggplot(data=subset_GoT,aes(x=social_status,y=exp_time_hrs,fill=occupation))+
  geom_boxplot()+facet_grid(dth_flag~sex)

```



Saving your plots - ggsave
========================================================

* It defaults to saving the last plot that you displayed, using the size of the current graphics device

* It also guesses the type of graphics device from the extension

* device: "eps", "ps", "tex" (pictex), "pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf" (windows only)


Saving your plots - ggsave (1/2)
========================================================


```{r,eval=FALSE}
ggplot(mtcars, aes(mpg, wt)) + geom_point()
ggsave("mtcars_default.pdf")
ggsave("mtcars.pdf", width = 4, height = 4)

```

Saving your plots - ggsave (2/2)
========================================================
Plot to save, defaults to last plot displayed.

ggsave(filename, plot = last_plot(), device = NULL, path = NULL,
  scale = 1, width = NA, height = NA, units = c("in", "cm", "mm"),
  dpi = 300, limitsize = TRUE, ...)

```{r,eval=FALSE}
plot1<-ggplot(mtcars, aes(mpg, wt)) + geom_point()
plot2<-ggplot(mtcars, aes(mpg, wt,col=as.factor(vs))) + geom_point()

ggsave("mtcars_default.png",plot1)
ggsave("mtcars_col.png",plot2)

```


Summary
========================================================
- Visualization of data through charts and graphs is an essential 
part of data analysis process, so R has excellent tools for creating 
graphics.
- There are many different ways of making plots in R
including base graphics and R packages such as lattics and ggplot2.
- Use vast arrays of R packages available to create 
publication quality graphs.


Base Graphics VS ggplot2 (1/5)
========================================================

Base Graphic 1

```{r}
base_graph_df
```

```{r,echo=F,fig.width=8,fig.height=4}
g_range<-c(0,100)
plot(base_graph_df$sample_num ,base_graph_df$treatment, type="o", col="blue", ylim=g_range,axes=FALSE, ann=FALSE)
axis(1, at=1:6, lab=base_graph_df$days)
axis(2, las=1, at=20*0:g_range[2])
box()

lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
title(main="Expression Data", col.main="red", font.main=4)
title(xlab="Samples", col.lab="purple")
title(ylab="Values", col.lab="purple")
legend(1, g_range[2], c("treatment","control"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2);  
```

Base Graphics VS ggplot2 (2/5)
========================================================

Base Graphic 2

```{r,echo=T,eval=F, fig.width=8,fig.height=4}
plot(base_graph_df$sample_num ,base_graph_df$treatment, type="o", col="blue", ylim=g_range,axes=FALSE, ann=FALSE)
axis(1, at=1:6, lab=base_graph_df$days)
axis(2, las=1, at=20*0:g_range[2])
box()

lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
title(main="Expression Data", col.main="red", font.main=4)
title(xlab="Samples", col.lab="purple")
title(ylab="Values", col.lab="purple")
legend(1, g_range[2], c("treatment","control"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2);  
```

Base Graphics VS ggplot2 (3/5)
========================================================

ggplot2 - prepare the data.frame

```{r}
# covert data.frame into the format that ggplot likes
# install.packages("reshape2")
library("reshape2")

base_graph_4gg<-melt(base_graph_df, id.vars="sample_num")
base_graph_4gg$variable<-relevel(base_graph_4gg$variable,ref="control")
head(base_graph_4gg,n=10)
```


Base Graphics VS ggplot2 (4/5)
========================================================

ggplot2 - plot the figure with default settings

```{r,fig.width=8,fig.height=4}
library("ggplot2")

ggplot(base_graph_4gg,aes(x=sample_num,y=value,col=variable,group=variable)) +
  geom_point(aes(shape=variable))+
  geom_line(aes(linetype=variable))+
  labs(title="Expression Data",x ="Sample", y = "Values")
      
```

Base Graphics VS ggplot2 (5/5)
========================================================
ggplot2 - plot the figure that matches base grahpics


```{r,fig.width=8,fig.height=4}

ggplot(base_graph_4gg,aes(x=sample_num,y=value,col=variable,group=variable)) +
  geom_point(aes(shape=variable))+
  geom_line(aes(linetype=variable))+
  scale_color_manual(values=c("red", "blue"))+
  scale_shape_manual(values=c(0,1))+
  scale_linetype_manual(values=c("dashed","solid"))+
  labs(title="Expression Data",x ="Sample", y = "Values")+
  theme_classic()+
  theme(plot.title = element_text(colour = "red",face="bold.italic",hjust = 0.5),
        axis.title = element_text(colour = "purple"))
 
      
```


========================================================
Time for an exercise!
========================================================
Exercise on Plotting can be found [here](http://mrccsc.github.io/Reproducible-R/r_course/exercises/Plotting_exercise.html)
Answers to exercise.
========================================================
Answers can be found here [here](answers/Plotting_answers.html)



Combining Plots
======================================================== 


R makes it easy to combine multiple plots into one overall graph, using either the par( ) or layout( ) function. 
With the par( ) function, you can include the option mfrow=c(nrows, ncols) to create a matrix of nrows x ncols plots that are filled in by row.
mfcol=c(nrows, ncols) fills in the matrix by columns.

Define a layout with 2 rows and 2 columns

```{r}
par(mfrow=c(2,2))
```


========================================================

Here, we will use different dataset with two columns each for treated and untreated samples.

```{r}
data1 <- read.table("data/gene_data.txt", header=T, sep="\t")
head(data1)
```

========================================================

Plot histograms for different columns in the data frame separately. This is not very efficient. 
You could also do it more efficiently using for loop.

```{r,eval=FALSE}
hist(data1$Untreated1)
hist(data1$Treated2)
hist(data1$Untreated2)
boxplot(data1$Treated1)
```

========================================================

 
```{r,echo=FALSE,fig.width=12,fig.height=10}
par(mfrow=c(2,2))
hist(data1$Untreated1)
hist(data1$Treated2)
hist(data1$Untreated2)
boxplot(data1$Treated1)
par(mfrow=c(1,1))
```

========================================================

Recover the original settings

```{r}
par(mfrow=c(1,1))
```

