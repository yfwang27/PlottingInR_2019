g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
print(g)
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
g + geom_point()
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram()
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=200)
========================================================
Let's start with a simple histogram plotting the distribution of the treatment vector:
Create a histogram for treatment
```{r,eval=FALSE}
hist(base_graph_df$treatment)
```
```{r,echo=FALSE,fig.width=8,fig.height=3,dpi=300,out.width="1920px",height="1080px"}
hist(base_graph_df$treatment)
```
========================================================
Concatenate the three vectors
```{r}
all <- c(base_graph_df$control, base_graph_df$treatment)
```
Create a histogram for data in light blue with the y axis ranging from 0-10
```{r,eval=FALSE}
hist(all, col="lightblue", ylim=c(0,10))
```
```{r,echo=FALSE,fig.width=10,fig.height=10}
hist(all, col="lightblue", ylim=c(0,10))
```
========================================================
Now change the breaks so none of the values are grouped together and flip the y-axis labels horizontally.
Compute the largest value used in the data
```{r}
max_num <- max(all)
```
Create a histogram for data with fire colors, set breaks so each number   is in its own group, make x axis range from 0-max_num, disable right-closing  of cell intervals, set heading, and make  y-axis labels horizontal.
========================================================
```{r,eval=FALSE}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
breaks: a single number giving the number of cells for the histogram,
An open interval does not include its endpoints, and is indicated with parentheses.
For example (0,1) means greater than 0 and less than 1.
A closed interval includes its endpoints, and is denoted with square brackets.
For example [0,1] means greater than or equal to 0 and less than or equal to 1.
========================================================
```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
========================================================
Now let's create uneven breaks and graph the probability density.
========================================================
Let's start with a simple histogram plotting the distribution of the treatment vector:
Create a histogram for treatment
```{r,eval=FALSE}
hist(base_graph_df$treatment)
```
```{r,echo=FALSE,fig.width=8,fig.height=3,dpi=300,out.width="1920px",height="1080px"}
hist(base_graph_df$treatment)
```
========================================================
Concatenate the three vectors
```{r}
all <- c(base_graph_df$control, base_graph_df$treatment)
```
Create a histogram for data in light blue with the y axis ranging from 0-10
```{r,eval=FALSE}
hist(all, col="lightblue", ylim=c(0,10))
```
```{r,echo=FALSE,fig.width=10,fig.height=10}
hist(all, col="lightblue", ylim=c(0,10))
```
========================================================
Now change the breaks so none of the values are grouped together and flip the y-axis labels horizontally.
Compute the largest value used in the data
```{r}
max_num <- max(all)
```
Create a histogram for data with fire colors, set breaks so each number   is in its own group, make x axis range from 0-max_num, disable right-closing  of cell intervals, set heading, and make  y-axis labels horizontal.
========================================================
```{r,eval=FALSE}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
breaks: a single number giving the number of cells for the histogram,
An open interval does not include its endpoints, and is indicated with parentheses.
For example (0,1) means greater than 0 and less than 1.
A closed interval includes its endpoints, and is denoted with square brackets.
For example [0,1] means greater than or equal to 0 and less than or equal to 1.
========================================================
```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
========================================================
Now let's create uneven breaks and graph the probability density.
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
hist(base_graph_df$treatment)
all <- c(base_graph_df$control, base_graph_df$treatment)
========================================================
Let's start with a simple histogram plotting the distribution of the treatment vector:
Create a histogram for treatment
```{r,eval=FALSE}
hist(base_graph_df$treatment)
```
```{r,echo=FALSE,fig.width=8,fig.height=3,dpi=300,out.width="1920px",height="1080px"}
hist(base_graph_df$treatment)
```
========================================================
Concatenate the three vectors
```{r}
all <- c(base_graph_df$control, base_graph_df$treatment)
```
Create a histogram for data in light blue with the y axis ranging from 0-10
```{r,eval=FALSE}
hist(all, col="lightblue", ylim=c(0,10))
```
```{r,echo=FALSE,fig.width=10,fig.height=10}
hist(all, col="lightblue", ylim=c(0,10))
```
========================================================
Now change the breaks so none of the values are grouped together and flip the y-axis labels horizontally.
Compute the largest value used in the data
```{r}
max_num <- max(all)
```
Create a histogram for data with fire colors, set breaks so each number   is in its own group, make x axis range from 0-max_num, disable right-closing  of cell intervals, set heading, and make  y-axis labels horizontal.
========================================================
```{r,eval=FALSE}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
breaks: a single number giving the number of cells for the histogram,
An open interval does not include its endpoints, and is indicated with parentheses.
For example (0,1) means greater than 0 and less than 1.
A closed interval includes its endpoints, and is denoted with square brackets.
For example [0,1] means greater than or equal to 0 and less than or equal to 1.
========================================================
```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="1920px",height="1080px"}
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
```
========================================================
Now let's create uneven breaks and graph the probability density.
hist(all, col="lightblue", ylim=c(0,10))
hist(all, col="lightblue", ylim=c(0,10))
max_num <- max(all)
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
max_num
?geom_histogram
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram()
ghis + geom_histogram(binwidth=10)
ghis + geom_histogram(binwidth=3000)
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=200)
ghis + geom_histogram(binwidth=150)
ghis + geom_histogram(binwidth=100)
brk <- c(0,30,40,50,60,80,100)
hist(all, col=heat.colors(length(brk)), breaks=brk,xlim=c(0,max_num), right=F, main="Probability Density",las=1, cex.axis=0.8, freq=F)
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_density()
episode_data$season<-as.factor(episode_data$season)
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot()
episode_data$season<-as.factor(episode_data$season)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot() + geom_point()
head(episode_data)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,col=season))
gbox + geom_boxplot() + geom_point()
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + geom_point()
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,col=season,fill=season))
gbox + geom_boxplot() + geom_point()
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + geom_point()
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + geom_point(aes(col=episode_number))
episode_data$episode_number<-as.factor(episode_data$episode_number)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + geom_point(aes(col=episode_number))
ftable(episode_data$season,episode_data$episode_number)
table(episode_data$season,episode_data$episode_number)
head(episode_data)
tail(episode_data)
episode_data$season<-as.factor(episode_data$season)
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot()
episode_data$season<-as.factor(episode_data$season)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot() + geom_point()
#gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot()
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot()
#episode_data$season<-as.factor(episode_data$season)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + lab(x="Season", y="Net running time")
#episode_data$season<-as.factor(episode_data$season)
gbox<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gbox + geom_boxplot() + labs(x="Season", y="Net running time")
# covert data.frame into the format that ggplot likes
# install.packages("reshape2")
library("reshape2")
base_graph_4gg<-melt(base_graph_df, id.vars=c("sample_num","days"))
base_graph_4gg$days<-factor(base_graph_4gg$days,
levels=c("Mon","Tue","Wed","Thu","Fri","Sat"))
base_graph_4gg$variable<-relevel(base_graph_4gg$variable,ref="control")
base_graph_4gg<-melt(base_graph_df, id.vars="sample_num")
base_graph_4gg$variable<-relevel(base_graph_4gg$variable,ref="control")
head(base_graph_4gg,n=10)
ggplot(base_graph_4gg,aes(x=sample_num,y=value,col=variable,group=variable)) +
geom_point(aes(shape=variable))+
geom_line(aes(linetype=variable))+
scale_shape_manual(values=c(0,1))+
scale_color_manual(values=c("red", "blue"))+
scale_linetype_manual(values=c("dashed","solid"))+
labs(title="Expression Data",x ="Sample", y = "Values")
gDen<- ggplot(data=episode_data, aes(x=season,y=net_running_time,fill=season))
gDen + geom_density()
gDen<- ggplot(data=episode_data, aes(x=net_running_time,fill=season))
gDen + geom_density()
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_density()
ghis<- ggplot(data=episode_data, aes(x=net_running_time,fill=season))
ghis + geom_density()
ghis<- ggplot(data=episode_data, aes(x=net_running_time,fill=season))
ghis + geom_density(alpha=0.5)
ghis<- ggplot(data=episode_data, aes(x=net_running_time,fill=season))
ghis + geom_density(alpha=0.5) +
facet_wrap(~season)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
head(character_data)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
head(character_data)
dim(character_data)
summary(character_data$sex)
character_data$sex<-as.factor(character_data$sex)
apply(character_data[,c(3:11)],2,as.factor)
character_data[,c(3:11)]<-apply(character_data[,c(3:11)],2,as.factor)
head(character_data)
str(character_data)
head(apply(character_data[,c(3:11)],2,as.factor))
character_data[,c(3:10)]<-apply(character_data[,c(3:10)],2,factor)
class(character_data$name)
class(character_data$religion)
?apply
character_data<-apply(character_data,2,as.factor)
head(character_data)
summary(character_data$top_location)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
head(character_data)
character_data<-apply(character_data,2,as.factor)
class(character_data)
dim(character_data)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
character_data$sex<-as.factor(character_data$sex)
character_data$religion<-as.factor(character_data$religion)
character_data$occupation<-as.factor(character_data$occupation)
character_data$social_status<-as.factor(character_data$social_status)
ggplot(data=character_data,aes(x=sex))+
geom_count()
ggplot(data=character_data,aes(x=sex))+
geom_bar()
ggplot(data=character_data,aes(x=religion))+
geom_bar()
ggplot(data=character_data,aes(x=sex))+
geom_bar()+facet_grid(religion~sex)
ggplot(data=character_data,aes(x=sex))+
geom_bar()+facet_grid(religion~sex,scales="free_x")
ggplot(data=character_data,aes(x=sex))+
geom_bar()+facet_grid(religion~sex,scales="free")
ggplot(data=character_data,aes(x=social_status))+
geom_bar()
ggplot(data=character_data,aes(x=sex))+
geom_bar()+facet_grid(religion~social_status,scales="free")
ggplot(data=character_data,aes(x=sex))+
geom_bar()+facet_grid(religion~social_status)
class(character_data$social_status)
levels(character_data$social_status)
colnames(character_data)
short_data<-character_data[,c(1:35)]
unique(short_data$sex)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M",F)
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M","F")
unique(short_data$sex)
short_data$religion<-ifelse(short_data$religion==1,"Great Stallion","none")
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M","F")
character_data<-read.csv("GoT_dataset/character_data_S01-S08.csv")
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M","F")
short_data[short_data$religion==1,]$religion<-"Great Stallion"
short_data[short_data$religion==2,]$religion<-"Lord of Light"
short_data[short_data$religion==3,]$religion<-"Faith of the Seven"
short_data[short_data$religion==4,]$religion<-"Old Gods"
short_data[short_data$religion==5,]$religion<-"Drowned God"
short_data[short_data$religion==6,]$religion<-"Many Faced God"
short_data[short_data$religion==7,]$religion<-"Other"
unique(short_data$religion)
short_data[short_data$religion==9,]$religion<-"Unknown/Unclear"
colnames(short_data)
unique(short_data$occupation)
short_data[short_data$short_data$occupation==1,]$occupation<-"Silk collar"
short_data[short_data$short_data$occupation==2,]$occupation<-"Boiled leather collar"
short_data[short_data$short_data$occupation==9,]$occupation<-"Unknown/Unclear"
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M","F")
short_data[short_data$religion==1,]$religion<-"Great Stallion"
short_data[short_data$religion==2,]$religion<-"Lord of Light"
short_data[short_data$religion==3,]$religion<-"Faith of the Seven"
short_data[short_data$religion==4,]$religion<-"Old Gods"
short_data[short_data$religion==5,]$religion<-"Drowned God"
short_data[short_data$religion==6,]$religion<-"Many Faced God"
short_data[short_data$religion==7,]$religion<-"Other"
short_data[short_data$religion==9,]$religion<-"Unknown/Unclear"
unique(short_data$occupation)
short_data[short_data$occupation==1,]$occupation<-"Silk collar"
short_data[short_data$occupation==2,]$occupation<-"Boiled leather collar"
short_data[short_data$occupation==9,]$occupation<-"Unknown/Unclear"
unique(short_data$social_status)
unique(short_data$social_status)
short_data[short_data$social_status==1,]$social_status<-"Highborn"
short_data[short_data$social_status==2,]$social_status<-"Lowborn"
unique(short_data$allegiance_last)
head(short_data)
unique(short_data$allegiance_last)
unique(short_data$allegiance_last)
short_data[short_data$allegiance_last==1,]$allegiance_last<-"Stark"
short_data[short_data$allegiance_last==2,]$allegiance_last<-"Targaryen"
short_data[short_data$allegiance_last==3,]$allegiance_last<-"Night's Watch"
short_data[short_data$allegiance_last==4,]$allegiance_last<-"Lannister"
short_data[short_data$allegiance_last==5,]$allegiance_last<-"Greyjoy"
short_data[short_data$allegiance_last==6,]$allegiance_last<-"Bolton"
short_data[short_data$allegiance_last==7,]$allegiance_last<-"Frey"
short_data[short_data$allegiance_last==8,]$allegiance_last<-"Other"
short_data[short_data$allegiance_last==9,]$allegiance_last<-"Unknown/Unclear"
unique(short_data$switch)
unique(short_data$allegiance_switch)
short_data$allegiance_switch<-ifelse(short_data$allegiance_switch==1,"N","Y")
getwd()
write.csv(short_data,file="Got_dataset/short_data.csv",row.names = F)
unique(short_data$allegiance_switch)
unique(short_data$allegiance_switch)
short_data$allegiance_switch<-ifelse(short_data$allegiance_switch==1,"N","Y")
head(short_data)
unique(short_data$allegiance_switched)
short_data$allegiance_switched<-ifelse(short_data$allegiance_switched==1,"N","Y")
short_data<-character_data[,c(1:35)]
short_data$sex<-ifelse(short_data$sex==1,"M","F")
short_data[short_data$religion==1,]$religion<-"Great Stallion"
short_data[short_data$religion==2,]$religion<-"Lord of Light"
short_data[short_data$religion==3,]$religion<-"Faith of the Seven"
short_data[short_data$religion==4,]$religion<-"Old Gods"
short_data[short_data$religion==5,]$religion<-"Drowned God"
short_data[short_data$religion==6,]$religion<-"Many Faced God"
short_data[short_data$religion==7,]$religion<-"Other"
short_data[short_data$religion==9,]$religion<-"Unknown/Unclear"
unique(short_data$occupation)
short_data[short_data$occupation==1,]$occupation<-"Silk collar"
short_data[short_data$occupation==2,]$occupation<-"Boiled leather collar"
short_data[short_data$occupation==9,]$occupation<-"Unknown/Unclear"
unique(short_data$social_status)
short_data[short_data$social_status==1,]$social_status<-"Highborn"
short_data[short_data$social_status==2,]$social_status<-"Lowborn"
unique(short_data$allegiance_last)
short_data[short_data$allegiance_last==1,]$allegiance_last<-"Stark"
short_data[short_data$allegiance_last==2,]$allegiance_last<-"Targaryen"
short_data[short_data$allegiance_last==3,]$allegiance_last<-"Night's Watch"
short_data[short_data$allegiance_last==4,]$allegiance_last<-"Lannister"
short_data[short_data$allegiance_last==5,]$allegiance_last<-"Greyjoy"
short_data[short_data$allegiance_last==6,]$allegiance_last<-"Bolton"
short_data[short_data$allegiance_last==7,]$allegiance_last<-"Frey"
short_data[short_data$allegiance_last==8,]$allegiance_last<-"Other"
short_data[short_data$allegiance_last==9,]$allegiance_last<-"Unknown/Unclear"
unique(short_data$allegiance_switched)
colnames(short_data)
unique(short_data$allegiance_switched)
short_data$allegiance_switched<-ifelse(short_data$allegiance_switched==1,"N","Y")
write.csv(short_data,file="Got_dataset/short_data.csv",row.names = F)
ggplot(data=short_data,aes(x=sex))+
geom_bar()
ggplot(data=short_data,aes(x=social_status))+
geom_bar()
ggplot(data=short_data,aes(x=sex))+
geom_bar()+facet_grid(religion~social_status)
ggplot(data=short_data,aes(x=social_status))+
geom_bar()
ggplot(data=short_data,aes(x=occupation))+
geom_bar()
ggplot(data=short_data,aes(x=sex))+
geom_bar()+facet_grid(occupation~social_status)
ggplot(data=short_data,aes(x=occupation))+
geom_bar()
ggplot(data=short_data,aes(x=occupation,col=social_status))+
geom_bar()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar()
ggplot(data=short_data,aes(x=sex))+
geom_bar()+facet_grid(occupation~social_status)
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar()
head(short_data)
short_data$dth_flag<-as.factor(short_data$dth_flag)
?geom_bar
#ggplot(data=short_data,aes(x=sex))+
#  geom_bar()+facet_grid(occupation~social_status)
g <- ggplot(mpg, aes(class))
g + geom_bar()
g + geom_bar(aes(weight = displ))
g + geom_bar()
g + geom_bar(aes(weight = displ))
g + geom_bar(aes(fill = drv))
df <- data.frame(x = rep(c(2.9, 3.1, 4.5), c(5, 10, 4)))
ggplot(df, aes(x)) + geom_bar()
# cf. a histogram of the same data
ggplot(df, aes(x)) + geom_histogram(binwidth = 0.5)
ggplot(df, aes(x)) + geom_bar()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge())
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) + coord_flip()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) +
facet_wrap(~dth_flag)
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) +
facet_grid(dth_flag~.)
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) +
facet_grid(~dth_flag)
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) +
facet_grid(~dth_flag)+ coord_flip()
head(short_data)
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge()) +
facet_grid(sex~dth_flag)+ coord_flip()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge2()) +
facet_grid(sex~dth_flag)+ coord_flip()
?position_dodge
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position=position_dodge2()) +
facet_grid(sex~dth_flag)+ coord_flip()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position="dodge2") +
facet_grid(sex~dth_flag)+ coord_flip()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position="dodge") +
facet_grid(sex~dth_flag)+ coord_flip()
?geom_bar
sessionInfo()
ggplot(data=short_data,aes(x=occupation,fill=social_status))+
geom_bar(position="dodge") +
facet_grid(sex~dth_flag)+ coord_flip()
head(short_data)
ggplot(data=short_data,aes(x=social_status,y=exp_time_sec))+
geom_bar()
ggplot(data=short_data,aes(x=occupation))+
geom_bar(stat="identity")
ggplot(data=short_data,aes(x=social_status,y=exp_time_sec))+
geom_bar(stat="identity")
ggplot(data=short_data,aes(x=social_status,y=exp_time_hrs))+
geom_bar(stat="identity")
ggplot(data=short_data,aes(x=social_status,y=exp_time_hrs,fill=social_status))+
geom_bar(stat="identity")
ggplot(data=short_data,aes(x=social_status,y=exp_time_hrs,fill=occupation))+
geom_bar(stat="identity")
table(is.na(short_data$exp_time_hrs))
#exp_time_sec#
max(short_data$exp_time_sec)
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
print(g)
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
g + geom_point()
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time,col=season))
g + geom_point()
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs))
ghis + geom_histogram()
ghis + geom_density()
ghis + geom_histogram()
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,col=social_status))
ghis + geom_histogram()
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5)
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5,binwidth = 10)
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5,binwidth = 1)
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5,binwidth = 2)
ghis + geom_density(alpha=0.5)
ghis + geom_histogram(alpha=0.5,binwidth = 2)
ghis + geom_density(alpha=0.5)
ghis + geom_histogram(alpha=0.5,binwidth = 2)
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5,binwidth =10)
ghis<-ggplot(data=short_data, aes(x=exp_time_hrs,fill=social_status))
ghis + geom_histogram(alpha=0.5,binwidth =20)
ghis + geom_density(alpha=0.5)
