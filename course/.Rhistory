suppressPackageStartupMessages(library("dplyr"))
suppressPackageStartupMessages(library("tidyr"))
read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
sampledes<-read.csv("/Volumes/bioinfomatics$/yfwang/Vernia/Collaborator_Brain/script/SampleDes.csv")
head(sampledes)
table(sampledes$Tissue)
table(sampledes$Genotype)
ftable(sampledes$Tissue,sampledes$Genotype)
dirgene<-"/Volumes/bioinfomatics$/yfwang/Louise/TCGA_pancancer/rawdata_from_Louis/list_of_INT/"
kegg_glycolysis<-read.table(paste0(dirgene,"KEGG_Glycolysis_Gluconeogenesis.txt"),header = F)
kegg_glycolysis<-kegg_glycolysis$V1
kegg_glycolysis<-kegg_glycolysis[!duplicated(kegg_glycolysis)]
Rabinowitz_genes<-read.table(paste0(dirgene,"RateLimiting_GSEA.txt"),header = F)
Rabinowitz_genes<-Rabinowitz_genes$V1
Rabinowitz_genes<-Rabinowitz_genes[!duplicated(Rabinowitz_genes)]
log2(0+0.1)
log2(0+00.1)
install.packages(c("DT", "formattable", "ggplot2", "knitr", "prettydoc"))
install.packages(c("gplots", "plotly"))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library("MotifDb"))
library("ChIPQC")
?ChIPQC
data(example_QCexperiment)
QCannotation(exampleExp)
exampleExp
ChIPQC()
ChIPQC
# annotation
#Either a character string indicating the genome and version to use as a genomic annotation,
#or a previously defined annotation (obtained using QCannotation on a previously defined ChIPQCexperiment object.)
library(rtracklayer)
library(GenomicRanges)
library(GenomicFeatures)
library(ChIPQC)
ce10gtf<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/UCSC_ce10_genes.gtf"
ce10genes<-import(ce10gtf,format="gtf")
unique(ce10genes$type)
txdb <- makeTxDbFromGFF (ce10gtf)
genes_fromce10 <- genes(txdb)
Alltranscripts<- reduce(transcripts(txdb))
seqlengths(Alltranscripts)<-c(15072423,15279345,13783700,17493793,20924149,17718866)
Allcds <- reduce(unique(unlist(cdsBy(txdb,"tx"))))
#cdsFromce10<-cds(txdb)
#cdsFromce10_reduce<- reduce(cdsFromce10)
exons_fromce10<-exons(txdb)
exons_fromce10_reduce<-reduce(exons_fromce10)
#utr_5fromce10<-fiveUTRsByTranscript(txdb)
#utr_3fromce10<-threeUTRsByTranscript(txdb)
Allintrons <- reduce(unique(unlist(intronsByTranscript(txdb))))
posAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "+"]
posAllTranscripts <- posAllTranscripts[!(start(posAllTranscripts)-20000 < 0)]
negAllTranscripts <- Alltranscripts[strand(Alltranscripts) == "-"]
chrLimits <- seqlengths(negAllTranscripts)[as.character(seqnames(negAllTranscripts))]
if(!any(is.na(chrLimits))){
negAllTranscripts <- negAllTranscripts[!(end(negAllTranscripts)+20000 > chrLimits)]
}
Alltranscripts <- c(posAllTranscripts,negAllTranscripts)
Promoters500<-reduce(flank(Alltranscripts,500))
Promoters2000to500<-reduce(flank(Promoters500,1500))
Promoters20000to2000<- reduce(flank(Promoters2000to500,18000))
customAnnotation <- list(
version="ce10",
LongPromoters20000to2000=Promoters20000to2000,
Promoters2000to500=Promoters2000to500,
Promoters500=Promoters500,
Alltranscripts=Alltranscripts,
Allcds=Allcds,
Allintrons=Allintrons
)
bamfiles<-dir("/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/Aligned",
pattern="*DupMarked.bam",full.names = T)
names(bamfiles)<-gsub(".DupMarked.bam","",basename(bamfiles))
blacklist<-"/Volumes/bioinfomatics$/yfwang/Jocelyn/UCSC_ce10/ce10-blacklist.bed"
chromosomes=c("chrI","chrII","chrIII","chrIV","chrV","chrX")
blackgr<-import(blacklist,format="bed")
SampleSheet <- "/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019/script/Pipelinesamplesheet.txt"
organism <- "ce10"
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss <- read.delim(SampleSheet,sep="\t",header=F)
ss
baseDir="/Volumes/bioinfomatics$/yfwang/Jocelyn/ChIP_Rec8_Aug2019"
bamFiles <- dir(file.path(baseDir,"Aligned"),pattern="*.DupMarked\\.bam$",full.name=T)
bamBase <- gsub("DupMarked\\.bam","",basename(bamFiles))
bamFrame <- cbind(bamBase,bamFiles)
peaks <-  dir(file.path(baseDir,"Macs"),pattern="*_peaks.bed$",full.name=T)
peaksBase <- gsub("_WithInput.*","",basename(peaks))
peakFrame <- cbind(peaksBase,peaks)
ss <- ss[ss[,11] == "Report",]
ssFrame <- merge(ss[,c(2,4,6,7,8,9,10,11)]
,merge(bamFrame,peakFrame,by=1,all.x=T,all.y=F)
,by=1,all.x=F,all.y=F)
bamControl <- vector("character",length=nrow(ssFrame))
for(i in 1:nrow(ssFrame)){
if(any(ssFrame[,1] %in% ssFrame[i,2])){
bamControl[i] <- as.vector(ssFrame[ssFrame[,1] %in% ssFrame[i,2],9])
}else{
bamControl[i] <- NA
}
}
SS2 <- data.frame(
SampleID=as.vector(ssFrame[,1]),
Tissue=as.vector(ssFrame[,3]),
Factor=as.vector(ssFrame[,4]),
Condition=as.vector(ssFrame[,5]),
Treatment=as.vector(ssFrame[,6]),
Replicate=as.vector(ssFrame[,7]),
bamReads=as.vector(ssFrame[,9]),
bamControl=bamControl,
ControlID=as.vector(ssFrame[,2]),
Peaks=as.vector(ssFrame[,10]),
PeakCaller=c(rep("macs",nrow(ssFrame)))
#Peaks=c(rep(NA,7))
)
SS2
ChIPQC
?ChIPQC
SS2
chromosomes
blackgr
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
str(resExperiment)
?ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
ChIPQC
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blacklist,chromosomes=chromosomes)
resExperiment <- ChIPQC(SS2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment
head(SS2)
SS2_N2<-SS2[1:2,]
SS2_N2
resExperiment_N2 <- ChIPQC(SS2_N2,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
SS2_R8<-SS2[3:4,]
resExperiment_R8 <- ChIPQC(SS2_R8,annotation=customAnnotation,blacklist=blackgr,chromosomes=chromosomes)
resExperiment_R8
experiment=SS2_R8
annotation=customAnnotation
blacklist=blackgr
chromosomes=chromosomes
consensus = FALSE
bCount = FALSE
mapQCth = 15
profileWin = 400
fragmentLength = 125
shifts = 1:300
if (class(experiment) == "character" || class(experiment) ==
"data.frame") {
experiment = dba(sampleSheet = experiment, bCorPlot = FALSE,
peakCaller = "bed")
}
experiment
if (class(experiment) != "DBA") {
stop("experiment must be either a samplesheet filename or a DBA (DiffBind) object.")
}
experiment$config$mapQCth = mapQCth
experiment
meta = data.frame(t(experiment$class))
head(meta)
if (length(unique(meta$bamRead)) != nrow(meta)) {
stop("Unable to process. Each bam file must be associated with at most one peakset.")
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
if (!missing(samples)) {
for (i in 1:length(experiment$peaks)) {
if (nrow(experiment$peaks[[i]]) == 0) {
experiment = addMatchingSample(experiment, i,
meta, samples)
}
}
experiment = dba(experiment, bCorPlot = FALSE)
}
?addMatchingSample
??addMatchingSample
if (missing(chromosomes)) {
chromosomes = 1
}
chromosomes
if (is.numeric(chromosomes) && missing(samples)) {
chrmap = experiment$chrmap
if (length(chrmap) == 0) {
warning("No chromosomes specified in peaks, using all.")
chromosomes = NULL
}
else {
if (max(chromosomes) > length(chrmap)) {
warning("Specified chromosome number exceeds chromosomes seen in peaks.")
chromosomes = chromosomes[chromosomes <= length(chrmap)]
}
chromosomes = chrmap[chromosomes]
message("Checking chromosomes:")
print(chromosomes)
}
}
if (!missing(annotation)) {
if (!is.null(annotation) && missing(samples)) {
if (class(annotation) != "list") {
message("Compiling annotation...")
annotation = getAnnotation(annotation, AllChr = chromosomes)
}
if (annotation$version == "hg19" && missing(blacklist)) {
blacklist = read.table(file.path(system.file("extdata",
package = "ChIPQC"), "blacklist_hg19.bed"),
header = TRUE)[, 1:4]
blacklist = makeGRangesFromDataFrame(blacklist,
ignore.strand = TRUE)
message("Using default blacklist for hg19...")
}
}
else if (class(annotation) == "character") {
annotation = list(version = annotation)
}
else {
annotation = list(version = "none")
}
}
annotation = list(version = "none")
annotation
annotation[[1]]
samplelist = NULL
controlist = NULL
i=1
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec
head(newrec)
dim(newrec)
class(newrec)
names(newrec)
newrec = NULL
newrec$peaks = experiment$peaks[[i]]
if (nrow(newrec$peaks) == 0) {
newrec$peaks = NULL
}
newrec$bam = as.character(meta$bamRead[i])
samplelist = listadd(samplelist, newrec)
??listadd
library(goseq)
cite(goseq)
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
Dates=c("Mon","Tue","Wed","Thurs","Fri","Sat"))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100),
days=c("Mon","Tue","Wed","Thu","Fri","Sat"))
base_graph_df
plot(base_graph_df$sample_num,base_graph_df$treatment)
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot()
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
plot(base_graph_df$sample_num,base_graph_df$treatment,type="l")
plot(base_graph_df$sample_num,base_graph_df$treatment)
?plot
base_graph_df$control
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
?geom_point
library("ggplot2")
?geom_point
?biocLite
??biocLite
sessionInfo()
library("Rsamtools")
library("org.Hs.eg.db")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
head(keys(org.Hs.eg.db,keytype="GENENAME"))
select(org.Hs.eg.db,keys=c("HEBP2","PRND"),keytype="SYMBOL",
columns=c("GENENAME","CHR","ENSEMBL"))
select(org.Hs.eg.db,keys=c("HEBP2","PRND"),keytype="SYMBOL",
columns=c("GENENAME","ENSEMBL"))
chr2Genes <- select(org.Hs.eg.db,keys="2",keytype="CHR",
columns=c("SYMBOL","GENENAME","ALIAS"))
txdb
library("org.Mm.eg.db")
unique(keys(org.Mm.eg.db,keytype="CHR"))
genes(org.Mm.eg.db)
library("org.Mm.eg.db")
keys(org.Mm.eg.db)
keys(org.Mm.eg.db)
?keys
keys(org.Mm.eg.db)
keytypes(org.Mm.eg.db)
library("biomaRt")
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "sep2015.archive.ensembl.org") # select ensembl
ens_datasets <- listDatasets(ensembl) # list datasets
head(ens_datasets)
head(ens_datasets)
dim(ens_datasets)
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL")
ens_datasets <- listDatasets(ensembl) # list datasets
head(ens_datasets)
dim(ens_datasets)
?useMart
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl) # select human dataset
ens_human_Attr <- listAttributes(ens_human) # list available annotation
ens_human_filters <- listFilters(ens_human) # list available filters
availFilters <- filterOptions("biotype",ens_human) # Displays accepted values for "biotype"
hg19Gene <- getBM(
attributes = c("chromosome_name","start_position","end_position",
"ensembl_gene_id","strand","external_gene_name"),
filter=c("chromosome_name","biotype"),
values=list(c(1:22,"X","Y"),"protein_coding"), mart=ens_human)
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "sep2015.archive.ensembl.org") # select ensembl
ens_datasets <- listDatasets(ensembl) # list datasets
head(ens_datasets)
dim(ens_datasets)
ensembl.19 <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "grch37.ensembl.org")
ensembl.19
ensembl
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "sep2015.archive.ensembl.org") # select ensembl
ens_datasets <- listDatasets(ensembl) # list datasets
head(ens_datasets)
dim(ens_datasets)
ens_datasets <- listDatasets(ensembl.19) # list datasets
head(ens_datasets)
dim(ens_datasets)
ens_datasets
ens_datasets <- listDatasets(ensembl) # list datasets
head(ens_datasets)
dim(ens_datasets)
ens_datasets
ens_datasets[grep("Homo",ens_datasets$description),]
library(GenomicFeatures)
hg19txdb <- makeTxDbFromUCSC(genome = "hg19", tablename = "knownGene")
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "grch37.ensembl.org",
dataset="hsapiens_gene_ensembl") # select ensembl
seq <- getSequence(id=symbols, type="hgnc_symbol",
seqType="coding_gene_flank", upstream=200, mart = ensembl)
symbols <- c("AQP1", "ASNSP2", "KPNA2", "FRMD4A", "NSUN5", "VAC14")
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", host = "grch37.ensembl.org",
dataset="hsapiens_gene_ensembl") # select ensembl
ensembl
seq <- getSequence(id=symbols, type="hgnc_symbol",
seqType="coding_gene_flank", upstream=200, mart = ensembl)
seq
?plot
?plot
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
base_graph_df<- data.frame(sample_num=c(1:6),days=c("Mon","Tue","Wed","Thu","Fri","Sat"),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100))
base_graph_df
base_graph_df<- data.frame(sample_num=c(1:6),days=c("Mon","Tue","Wed","Thu","Fri","Sat"),
treatment=c(0.02,1.8, 17.5, 55,75.7, 80),
control= c(0, 20, 40, 60, 80,100))
base_graph_df
plot(base_graph_df$sample_num, base_graph_df$treatment)
plot(base_graph_df$sample_num,base_graph_df$treatment)
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
title(main="Treatment", col.main="red", font.main=4)
?
title
?font
title(main="Treatment", col.main="red", font.main=3)
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
title(main="Treatment", col.main="red", font.main=3)
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue")
title(main="Treatment", col.main="red", font.main=2)
plot(base_graph_df$sample_num,base_graph_df$treatment, type="o", col="blue", ylim=c(0,100))
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
title(main="Expression Data", col.main="red", font.main=4)
?range
g_range
g_range <- range(0, base_graph_df$treatment, base_graph_df$control)
g_range
base_graph_df$treatment
plot(base_graph_df$sample_num ,base_graph_df$treatment, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:6, lab=paste("Sample",c(1:6)))
axis(1, at=1:6, lab=base_graph_df$days)
plot(base_graph_df$sample_num ,base_graph_df$treatment, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:6, lab=base_graph_df$days)
axis(2, las=1, at=20*0:g_range[2])
box()
lines(base_graph_df$control, type="o", pch=22, lty=2, col="red")
title(main="Data", col.main="red", font.main=4)
title(xlab="Samples", col.lab=rgb(0,0.5,0))
title(ylab="Values", col.lab=rgb(0,0.5,0))
barplot(base_graph_df$treatment)
barplot(base_graph_df$treatment)
barplot(base_graph_df, main="Treatment", xlab="Days",ylab="values", names.arg=base_graph_df$days,
border="blue", density=c(10,20,30,40,50,60))
head(base_graph_df)
barplot(base_graph_df$treatment, main="Treatment", xlab="Days",ylab="values", names.arg=base_graph_df$days,
border="blue", density=c(10,20,30,40,50,60))
barplot(as.matrix(base_graph_df[,c("treatment","control")]), main="Data", ylab= "Total",
beside=TRUE, col= c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"))
barplot((base_graph_df[,c("treatment","control")]), main="Data", ylab= "Total",
beside=TRUE, col= c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"))
legend("topleft", base_graph_df$days, cex=0.8,bty="n",
fill=  c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"));
base_graph_df$days
barplot(as.matrix(base_graph_df[,c("treatment","control")]), main="Data", ylab= "Total",
beside=TRUE, col= c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"))
legend("topleft", base_graph_df$days, cex=0.8,bty="n",
fill=  c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"));
legend("topleft", c("Mon","Tue","Wed","Thu","Fri","Sat"), cex=0.8,bty="n",
fill=  c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"));
?legend
hist(treatment)
barplot(as.matrix(base_graph_df[,c("treatment","control")]), main="Data", ylab= "Total", beside=TRUE, col= c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"))
legend("topleft", c("Mon","Tue","Wed","Thu","Fri","Sat"), cex=0.8,bty="n",
fill=  c("lightblue", "mistyrose", "lightcyan","lavender", "cornsilk","maroon"));
hist(base_graph_df$treatment)
hist(all, col="lightblue", ylim=c(0,10))
max_num <- max(all)
all <- c(base_graph_df$control, base_graph_df$treatment)
all
max_num <- max(all)
max_num
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
max_num
data1 <- read.table("data/gene_data.txt", header=T, sep="\t")
heat.colors(length(brk))
hist(all, col=heat.colors(max_num), breaks=max_num, xlim=c(0,max_num), right=F,
main="Histogram", las=1)
heat.colors(max_num)
?heat.colors
max_num
brk <- c(0,30,40,50,60,80,100)
hist(all, col=heat.colors(length(brk)), breaks=brk,xlim=c(0,max_num), right=F, main="Probability Density",las=1, cex.axis=0.8, freq=F)
hist(all, col=heat.colors(length(brk)), breaks=brk,xlim=c(0,max_num), right=F, main="Probability Density",las=1, cex.axis=0.8, freq=F)
data1 <- read.table("data/gene_data.txt", header=T, sep="\t")
getwd()
setwd("/Volumes/bioinfomatics$/yfwang/CBW/LMS_PlottingInR/course")
data1 <- read.table("data/gene_data.txt", header=T, sep="\t")
head(data1)
par(mfrow=c(2,2))
hist(data1$Untreated1)
hist(data1$Treated2)
hist(data1$Untreated2)
boxplot(data1$Treated1)
par(mfrow=c(1,1))
#head(iris, n = 3)
data1
head(data1)
#head(iris, n = 3)
head(data1)
geom(data=data1, aes(x=Untreated1,y=Treated1))
ggplot(data=data1, aes(x=Untreated1,y=Treated1))
library(ggplot2)
ggplot(data=data1, aes(x=Untreated1,y=Treated1))
g<-ggplot(data=data1, aes(x=Untreated1,y=Treated1))
g
print(g)
g + geom_point()
print(g)
data(i"iris")
data("iris")
iris
head(iris)
g<-ggplot(data=data1, aes(x=Untreated1,y=Treated1))
g + geom_point()
g<-ggplot(data=data1, aes(x=Untreated1,y=Treated1))
g + geom_point()
head(data1)
episode_data<-read.csv("GoT_dataset/episode_data.csv")
head(episode_data, n = 10)
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
print(g)
g<-ggplot(data=episode_data, aes(x=gross_running_time,y=net_running_time))
g + geom_point()
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_box()
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot()
episode_data$season<-as.factor(episode_data$season)
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot()
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot() + geom_point()
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram()
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=1)
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=10)
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=100)
#ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_histogram(binwidth=200)
ghis<-ggplot(data=episode_data, aes(x=net_running_time))
ghis + geom_density()
episode_data$season<-as.factor(episode_data$season)
gbox<-ggplot(data=episode_data, aes(x=season,y=net_running_time))
gbox + geom_boxplot()
head(episode_data)
